# This is custom evalutaion implementation using precision and recall at different scales
__author__ = 'vaibhavtyagi'

from operator import itemgetter
import math,sys
import pylab as pl

goodGrade = dict()
avgGrade = dict()
badGrade = dict()
resultTuple = dict()
sortedResult = dict()
precisionScores = dict()
recallScores = dict()
FScore = dict()
avgPrec = dict()
NDGC = dict()
Rprec= dict()
R = dict()




indexes = [5,10,20,50,100]


# Read qrel file i.e expected label file
def readQrelFile():
    global goodGrade
    global avgGrade
    global badGrade
    global R
    i=0
    try:
        fp = open(qrelsFile,'r')
    except (OSError, IOError) as e:
        print 'Unable to read Qrel file..!!'
        exit()

    content = fp.readlines()
    for line in content:
        i+=1
        #if i==40:
        #    break
        #print i
        line=line.strip()
        if line == '':
            continue
        fields = line.split()
        Qid = fields[0]
        Aid = fields[1]
        Did = fields[2]
        grade = fields[3]
        if grade == '0':
            try:
                badGrade[Qid].append(Did)
            except KeyError as e:
                badGrade[Qid] = [Did]

        elif grade == '1':
            try:
                avgGrade[Qid].append(Did)
            except KeyError as e:
                avgGrade[Qid] = [Did]

            try:
                R[Qid]+=1
            except KeyError as e:
                R[Qid] = 1

        elif grade == '2':
            try:
                goodGrade[Qid].append(Did)
            except KeyError as e:
                goodGrade[Qid] = [Did]

            try:
                R[Qid]+=1
            except KeyError as e:
                R[Qid] = 1
        else:
            print 'Invalid Grade entered:',grade
            exit()


    fp.close()

# Read results file generated by pagerank script
def readResultFile():
    global resultTuple
    global sortedResult
    i=0

    try:
        fp = open(resultFile,'r')
    except KeyError as e:
        print "Unable to open Result file..!!"
        exit()
    content= fp.readlines()
    for line in content:
        i+=1
        line=line.strip()
        fields = line.split()
        Qid = fields[0]
        Did = fields[2]
        #print Did
        rank = fields[3]
        score = float(fields[4])
        #tpl = (Did,score)
        try:
            #resultTuple[Qid].append(Did)
            sortedResult[Qid].append(Did)
        except KeyError as e:
            #resultTuple[Qid] = [Did]
            sortedResult[Qid]=[Did]
        #if i==10:
        #    break
    #print resultTuple
    #for Qid in resultTuple.keys():
        #sortedResult[Qid] = [i[0] for i in sorted(resultTuple[Qid],key=itemgetter(1))]




# Calculate precision on ranked pages
def avgPrecision():
    global goodGrade
    global avgGrade
    global indexes
    global avgPrec
    global R
    for Qid in sortedResult.keys():
        vectorList = getVector(sortedResult[Qid],Qid)
        i=1
        gCount=0
        avg=0
        for vector in vectorList:
            if vector !=0:
                gCount+=1
                avg+=gCount/float(i)
            i+=1
        avgPrec[Qid] = avg/float(R[Qid])


# Calculate R_Precision on ranked pages
def R_precision():
    global Rprec
    global precisionScores
    global R
    i=1
    for Qid in sortedResult.keys():
        for prec in precisionScores[Qid]:
            for recall in recallScores[Qid]:
                if prec == recall:
                    Rprec[Qid] = prec
                    break
            i+=1
        Rprec[Qid] = precisionScores[Qid][R[Qid]-1]



# Calculate NDGC on ranked pages
def calculate_NDGC():
    global sortedResult
    global NDGC

    for Qid in sortedResult.keys():
        vectorList = getVector(sortedResult[Qid],Qid)
        numerator=0
        i=1
        for vector in vectorList:
            if i==1:
                numerator+= vector
            else:
                numerator+= vector/float(math.log(i))
            i+=1
        denominator=0
        i=1
        #print vectorList
        #print sorted(vectorList,reverse=True)
        #print Qid
        for vector in sorted(vectorList,reverse=True):
            #print vector
            if i==1:
                denominator+= vector
            else:
                denominator+= vector/float(math.log(i))
            i+=1
        #print denominator
        #print numerator
        if denominator != 0:
            NDGC[Qid] = numerator/float(denominator)
        else:
            NDGC[Qid] = 0

def getVector(docList,Qid):
    global goodGrade
    global badGrade
    global avgGrade
    vectorList = list()
    for doc in docList:
        good = False
        bad = False
        avg = False
        if Qid in goodGrade:
            if doc in goodGrade[Qid]:
                good=True
        if Qid in avgGrade:
            if doc in avgGrade[Qid]:
                avg = True
        if Qid in badGrade:
            if doc in badGrade[Qid]:
                bad =True

        if good == True:
            vectorList.append(2)
        elif avg==True:
            vectorList.append(1)
        elif bad==True:
            vectorList.append(0)
    return vectorList



# Generate and output scores for all models
def ExplainScore(Qid):
    global precisionScores
    global recallScores
    global FScore
    global avgPrec
    global R
    global Rprec
    global NDGC
    global indexes
    print '------------------------------------'
    print 'Query Id:',Qid
    print 'Relevant Results:',R[Qid]
    print
    print '----Precision stats---'
    for i in indexes:
        print 'precision at',i,':',precisionScores[Qid][i-1]
    print '------------------'
    print
    print '----Recall stats---'
    for i in indexes:
        print 'Recall at',i,':',recallScores[Qid][i-1]
    print '------------------'
    print
    print '----F1 stats---'
    for i in indexes:
        print 'F1 at',i,':',FScore[Qid][i-1]
    print '------------------'
    print
    print 'Average Precision:',avgPrec[Qid]
    print 'R Precision:',Rprec[Qid]
    print 'NDGC score:',NDGC[Qid]



# Average score at all precisions and models as final output
def averageScore():
    global precisionScores
    global recallScores
    global FScore
    global avgPrec
    global Rprec
    global NDGC
    global indexes
    indexLen = len(indexes)
    print
    print '-----------------------------'
    print 'Average Score Summary'
    print
    print '-----Precision Average-----'
    for i in indexes:
        total=0
        for Qid in precisionScores:
            total+=precisionScores[Qid][i-1]
        print 'Precision at',i,':',total/float(len(precisionScores))
    print '-----------------'
    print
    print
    print '-----Recall Average-----'
    for i in indexes:
        total=0
        for Qid in recallScores:
            total+=recallScores[Qid][i-1]
        print 'Recall at',i,':',total/float(len(recallScores))
    print '-----------------'
    print
    print
    print '-----F1 Average-----'
    for i in indexes:
        total=0
        for Qid in FScore:
            total+=FScore[Qid][i-1]
        print 'F1 at',i,':',total/float(len(FScore))
    print '-----------------'
    print
    avg=0
    for Qid in avgPrec:
        avg+=avgPrec[Qid]
    avg=avg/float(len(avgPrec))
    print 'Average Precision:',avg

    avg=0
    for Qid in Rprec:
        avg+=Rprec[Qid]

    avg=avg/float(len(Rprec))
    print 'Average R Precision:',avg

    avg=0

    for Qid in NDGC:
        avg+=NDGC[Qid]

    avg=avg/float(len(NDGC))
    print 'Average NDGC score:',avg
    print


# Call parameters for score calculation
def calculateParam():
    global precisionScores
    global recallScores
    global FScore
    global avgPrec
    global Rprec
    global NDGC
    global sortedResult
    for Qid in sortedResult.keys():
        i=1
        gCount=0
        vectorList=getVector(sortedResult[Qid],Qid)
        #print(len(vectorList))
        for vector in vectorList:
            if vector !=0:
                gCount+=1
            recall = gCount/float(R[Qid])
            try:
                recallScores[Qid].append(recall)
            except:
                recallScores[Qid] = [recall]

            prec = gCount/float(i)

            try:
                precisionScores[Qid].append(prec)
            except:
                precisionScores[Qid] = [prec]

            if (prec!=0) & (recall!=0):
                F=(2* prec * recall)/(prec+recall)
            else:
                F=0.0

            try:
                FScore[Qid].append(F)
            except:
                FScore[Qid]= [F]

            i+=1




def generateOutput():
    if explain == True:
        for Qid in sortedResult.keys():
            ExplainScore(Qid)
        averageScore()
    else:
        averageScore()

if (len(sys.argv) == 4) & (sys.argv[1] == '-q'):
    qrelsFile = sys.argv[2]
    resultFile = sys.argv[3]
    explain = True

elif (len(sys.argv) == 3):
    qrelsFile = sys.argv[1]
    resultFile = sys.argv[2]
    explain = False
else:
    print "Invalid command Line Parameters...!!"
    print "Enter"
    print "For details: python <filename> -q <qrelfile> <scorefile>"
    print "For summary: python <filename> <qrelfile> <scorefile>"
    exit()




# Plot precision vs recall graph
def plotGraph():
    global R
    recall = list()
    precision = list()
    interpolatedPrec = list()
    for Qid in ['151801']:
        i=1
        gCount=0
        vectorList=getVector(sortedResult[Qid],Qid)
        for vector in vectorList:
            if vector !=0:
                gCount+=1
            recall.append(gCount/float(R[Qid]))
            precision.append(gCount/float(i))
            i+=1
        for i in range(len(precision)):

            temp = max(precision[i:])
            interpolatedPrec.append(temp)

        pl.xlabel('Recall')
        pl.ylabel('Precision')
        pl.ylim([0.0, 1.05])
        pl.xlim([0.0, 1.0])
        pl.plot(recall,precision,'g--')
        pl.plot(recall,interpolatedPrec,'r-')
        pl.grid()
        pl.title('Precision-Recall Graph for'+Qid)
        pl.legend(loc="upper right", prop={'size':10})
        pl.savefig(Qid + '.png')
        pl.show()


#print qrelsFile
#print resultFile
#print explain


readQrelFile()
readResultFile()

calculateParam()

avgPrecision()
R_precision()
calculate_NDGC()
generateOutput()
#plotGraph()